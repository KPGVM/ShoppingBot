from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram import F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram import Router
from utils import *


router = Router()

@router.message(Command("start"))
@router.callback_query(F.data == "start")
async def start_command(message: types.Message | types.CallbackQuery):
    if isinstance(message, types.CallbackQuery):
        type_message = "callback_query"
    else:
        type_message = "message"

    if not await check_username(message):
        return

    # –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∫–æ—Ä–µ–Ω–µ–≤—ñ –∫–Ω–æ–ø–∫–∏ –∑ config.menu —Ç–∞ –¥–æ–¥–∞—î–º–æ —ó—Ö –≤ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    for number_button, name_button in enumerate(config.menu):
        builder.add(types.InlineKeyboardButton(text=name_button, callback_data=f"menu|{number_button}"))

    builder.add(types.InlineKeyboardButton(text="üßë‚Äçüíª–†–æ–∑—Ä–æ–±–Ω–∏–∫ –±–æ—Ç—É ", callback_data="developer"))
    builder.max_width = 2
    builder.adjust()


    if type_message == "callback_query":
        await message.message.edit_text(
            f"–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –º–∞–≥–∞–∑–∏–Ω—É <b>{config.name_store}</b>, –≤–∏–±–µ—Ä—ñ—Ç—å –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏.",
            reply_markup=builder.as_markup(),
        )
    else:
        await message.answer(
            f"–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –º–∞–≥–∞–∑–∏–Ω—É <b>{config.name_store}</b>, –≤–∏–±–µ—Ä—ñ—Ç—å –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏.",
            reply_markup=builder.as_markup(),
        )

@router.callback_query(F.data.startswith("menu|"))
async def menu_callback(callback: types.CallbackQuery):
    if not await check_username(callback):
        return

    # –¢—Ä–æ—à–∫–∏ —Ç–µ–º—ñ–Ω–æ–ª–æ–≥—ñ—ó:
    #   index - —Ü–µ list –∑ —ñ–Ω–¥–µ–∫—Å–∞–º–∏, –∑–∞ —è–∫–∏–º–∏ –º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª–∏ –ø–æ –º–µ–Ω—é
    #   –ø–æ —ó—Ö –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∏–Ω—É–ª–∏–π —à–ª—è—Ö, –ø–æ—Ç–æ—á–Ω—É data, –º–æ–∂–Ω–∞ —Å–∫–∞–∑–∞—Ç–∏ —â–æ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫ –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ
    #   
    #   data - —Ü–µ —Ç–µ, —â–æ –º–∏ –æ—Ç—Ä–∏–º—É—î–º–æ –∑ config.menu, —Ç–∞ —â–æ –º–∏ –±—É–¥–µ–º–æ –≤—ñ–¥–¥–∞–≤–∞—Ç–∏ –≤ –∫–Ω–æ–ø–∫–∏
    #   —Å–ø–æ—á–∞—Ç–∫—É –º–∏ –æ—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è data —á–µ—Ä–µ–∑ —ñ–Ω–¥–µ–∫—Å–∏, —á–µ—Ä–µ–∑ "–ø—Ä–æ–≥–æ–Ω" –ø–æ –≤—Å—ñ–º –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è–º
    #   –∞ –ø–æ—Ç—ñ–º –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–æ–≥–æ, —á–∏ —Ü–µ dict —á–∏ list, –º–∏ —Ñ–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏
    #   —Ç–∞ —è–∫—â–æ —Ü–µ —Å–ø–∏—Å–æ–∫, —Ç–æ —Ü–µ –±—É–¥—É—Ç—å —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –∫–Ω–æ–ø–∫–∏



    # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å-(–∏) –∑ callback.data —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ –≤ –∑–º—ñ–Ω–Ω—É data —Ç–µ, —â–æ –Ω–∞–º
    # –ø–æ—Ç—ñ–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∏ –≤ –∫–Ω–æ–ø–∫–∏.
    index = callback.data.split("|")
    index.pop(0)  # –í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç, —è–∫–∏–π —î "menu"

    current_path = callback.data  # –®–ª—è—Ö –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é
    current_index_list = "|".join(index)  # –ó–±–∏—Ä–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é
    previous_path = "menu|" + "|".join(index[:-1])  # –ó–±–∏—Ä–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–∏–Ω—É–ª–æ–≥–æ –º–µ–Ω—é

    if len(index) == 1:
        index = int(index[0])
        data = get_item_by_index(config.menu, index)
        button_back = types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="start")
    else:
        data = get_data_by_index(index)

        button_back = types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data=previous_path)


    
    match data:
        # –Ø–∫—â–æ data - —Ü–µ dict, —Ç–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –º–∏ –º–∞—î–º–æ –¥–∞–ª—ñ –¥–∞—Ç–∏ –Ω–µ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –≤–∏–±–æ—Ä–∏
        case dict():
            builder = InlineKeyboardBuilder()

            for number_button, name_button in enumerate(data):
                builder.add(types.InlineKeyboardButton(text=name_button, callback_data=f"{current_path}|{number_button}"))
        
        # –Ø–∫—â–æ data - —Ü–µ list, —Ç–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –º–∏ –º–∞—î–º–æ –¥–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –≤–∏–±–æ—Ä–∏
        case list():
            builder = InlineKeyboardBuilder()

            for i in range(len(data)):
                builder.add(types.InlineKeyboardButton(text=data[i], callback_data=f"final_choose|{current_index_list}|{i}"))

    builder.add(button_back)
    builder.max_width = 1
    builder.adjust()


    await callback.message.edit_text(
        text="‚õìÔ∏è–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("final_choose|"))
async def final_choose_callback(callback: types.CallbackQuery):
    index = callback.data.split("|")
    index.pop(0)  # –í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç, —è–∫–∏–π —î "final_choose"

    current_index_list = "|".join(index)  # –ó–±–∏—Ä–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é
    previous_path = "menu|" + "|".join(index[:-1])  # –ó–±–∏—Ä–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–∏–Ω—É–ª–æ–≥–æ –º–µ–Ω—é
    final_index = int(index[-1]) # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å, —è–∫–∏–π –º–∏ –≤–∏–±—Ä–∞–ª–∏

    # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –∑ index, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä, —ñ –º–∏ –π–æ–≥–æ –æ—Ç—Ä–∏–º–∞—î–º–æ
    # –∑ data –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É, —è–∫–∏–π —î list[str]
    index.pop()


    # –ó–º—ñ–Ω–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –ø–æ—Ç—ñ–º –≤–∏–≤–æ–¥–∏—Ç–∏ —Å—é–¥–∏ –≤—Å—ñ –Ω–∞–∑–≤–∏ –≤–∏–±–æ—Ä—ñ–≤, —è–∫—ñ –º–∏ –∑—Ä–æ–±–∏–ª–∏
    path_text = ""

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ —ñ–Ω–¥–µ–∫—Å–∞–º–∏, —è–∫—ñ –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –∑ callback.data
    path_text, data = get_data_by_index(index, include_name_path=True)

    # –î–æ–¥–∞—î–º–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è data, —è–∫–µ —î list[str] –Ω–∞–∑–≤—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–∏–±–æ—Ä—É
    final_choose_text = data[final_index]
    path_text += final_choose_text

    callback_data_confirm = "confirm_order" + "|" + current_index_list

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚úÖ–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=callback_data_confirm))
    builder.add(types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data=previous_path))
    builder.max_width = 2
    builder.adjust()

    await callback.message.edit_text(
        text="<b>‚úÖ–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤—ñ–π –≤–∏–±—ñ—Ä</b>\n" \
        f"üéõ–í–∞—à –≤–∏–±—ñ—Ä: <code>{path_text}</code>\n\n" \
        "üì¨–ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∞—à –≤–∏–±—ñ—Ä –Ω–∞–¥—ñ—à–ª–µ—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("confirm_order|"))
async def confirm_order_callback(callback: types.CallbackQuery):
    index = callback.data.split("|")
    index.pop(0)  # –í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç, —è–∫–∏–π —î "confirm_order"
    final_index = int(index[-1])  # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å, —è–∫–∏–π –º–∏ –≤–∏–±—Ä–∞–ª–∏

    index.pop()  # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç, —è–∫–∏–π —î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–º –≤–∏–±–æ—Ä–æ–º
    path_text, data = get_data_by_index(index, include_name_path=True)

    path_text += data[final_index]  # –î–æ–¥–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä –¥–æ —Ç–µ–∫—Å—Ç—É


    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    message_text = f"<b>‚úÖ–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.full_name} (@{callback.from_user.username})</b>\n\n" \
                   f"üéõ–í–∏–±—ñ—Ä: <code>{path_text}</code>\n" \
                   f"üì¨ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: <code>{callback.from_user.id}</code>"

    await callback.bot.send_message(chat_id=config.ID_CHAT_ORDERS, text=message_text)



    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="start"))
    builder.adjust()


    await callback.message.edit_text(
        text="‚úÖ–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó!",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "developer")
async def developer_callback(query: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="start"))
    
    await query.message.edit_text(
        text="–†–æ–∑—Ä–æ–±–Ω–∏–∫ –±–æ—Ç—É:\n" \
              "üîó–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ GitHub: https://github.com/KPGVM\n" \
              "üì±Telegram –¥–ª—è –∑–≤'—è–∑–∫—É: @ana_earabiun (<b>–Ø –ù–ï –ü–†–û–î–ê–í–ï–¶–¨, –õ–ò–¶–ï –†–û–ó–†–û–ë–ù–ò–ö</b>)\n\n" \
              "–ë—É–¥—É –Ω–µ –ø—Ä–æ—Ç–∏, —è–∫—â–æ –≤–∏ –∑–∞–º–æ–≤–∏—Ç–µ —É –º–µ–Ω–µ —Ä–æ–∑—Ä–æ–±–∫—É –±–æ—Ç–∞ –≤ Telegramüòá",
        reply_markup=builder.as_markup(),
        disable_web_page_preview=True
    )
